// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addLocationToTrip = `-- name: AddLocationToTrip :exec

INSERT INTO trip_locations (trip_id, location_id, position)
VALUES ($1, $2, $3)
`

type AddLocationToTripParams struct {
	TripID     int32
	LocationID int32
	Position   int32
}

// trip_locations.sql (İlişkisel Sorgular)
func (q *Queries) AddLocationToTrip(ctx context.Context, arg AddLocationToTripParams) error {
	_, err := q.db.ExecContext(ctx, addLocationToTrip, arg.TripID, arg.LocationID, arg.Position)
	return err
}

const createLocation = `-- name: CreateLocation :one

INSERT INTO locations (name, address, site_url, notes, latitude, longitude)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, address, site_url, notes, latitude, longitude, created_at
`

type CreateLocationParams struct {
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	Latitude  sql.NullString
	Longitude sql.NullString
}

type CreateLocationRow struct {
	ID        int32
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	Latitude  sql.NullString
	Longitude sql.NullString
	CreatedAt sql.NullTime
}

// locations.sql
// GÜNCELLENDİ: latitude ve longitude eklendi. Parametre sayıları arttı ($4 -> $6).
func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (CreateLocationRow, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.Name,
		arg.Address,
		arg.SiteUrl,
		arg.Notes,
		arg.Latitude,
		arg.Longitude,
	)
	var i CreateLocationRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.SiteUrl,
		&i.Notes,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
	)
	return i, err
}

const createTrip = `-- name: CreateTrip :one

INSERT INTO trips (user_id, name, description, start_date, end_date, start_position, end_position)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, name, description, start_date, end_date, start_position, end_position, created_at, updated_at
`

type CreateTripParams struct {
	UserID        string
	Name          string
	Description   sql.NullString
	StartDate     time.Time
	EndDate       time.Time
	StartPosition sql.NullString
	EndPosition   sql.NullString
}

type CreateTripRow struct {
	ID            int32
	UserID        string
	Name          string
	Description   sql.NullString
	StartDate     time.Time
	EndDate       time.Time
	StartPosition sql.NullString
	EndPosition   sql.NullString
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

// trips.sql
// DÜZELTİLDİ: "finish_position" -> "end_position" olarak değiştirildi.
func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (CreateTripRow, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.StartPosition,
		arg.EndPosition,
	)
	var i CreateTripRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.StartPosition,
		&i.EndPosition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trips
WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, id)
	return err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, address, site_url, notes, latitude, longitude, created_at
FROM locations
WHERE id = $1
`

type GetLocationByIDRow struct {
	ID        int32
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	Latitude  sql.NullString
	Longitude sql.NullString
	CreatedAt sql.NullTime
}

// GÜNCELLENDİ: "*" yerine tüm kolonlar açıkça yazılarak yeni kolonlar eklendi.
func (q *Queries) GetLocationByID(ctx context.Context, id int32) (GetLocationByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, id)
	var i GetLocationByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.SiteUrl,
		&i.Notes,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
	)
	return i, err
}

const getTripByID = `-- name: GetTripByID :one
SELECT id, user_id, name, description, start_date, end_date, start_position, end_position, created_at, updated_at
FROM trips
WHERE id = $1
`

type GetTripByIDRow struct {
	ID            int32
	UserID        string
	Name          string
	Description   sql.NullString
	StartDate     time.Time
	EndDate       time.Time
	StartPosition sql.NullString
	EndPosition   sql.NullString
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

// DÜZELTİLDİ: "finish_position" -> "end_position" olarak değiştirildi.
func (q *Queries) GetTripByID(ctx context.Context, id int32) (GetTripByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTripByID, id)
	var i GetTripByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.StartPosition,
		&i.EndPosition,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTripLocations = `-- name: GetTripLocations :many
SELECT l.id, l.name, l.address, l.site_url, l.notes, l.latitude, l.longitude, l.created_at, tl.position
FROM locations l
JOIN trip_locations tl ON l.id = tl.location_id
WHERE tl.trip_id = $1
ORDER BY tl.position
`

type GetTripLocationsRow struct {
	ID        int32
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	Latitude  sql.NullString
	Longitude sql.NullString
	CreatedAt sql.NullTime
	Position  int32
}

// GÜNCELLENDİ: "l.*" yerine tüm location kolonları açıkça yazılarak yeni kolonlar eklendi.
func (q *Queries) GetTripLocations(ctx context.Context, tripID int32) ([]GetTripLocationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTripLocations, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripLocationsRow
	for rows.Next() {
		var i GetTripLocationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.SiteUrl,
			&i.Notes,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, address, site_url, notes, latitude, longitude, created_at
FROM locations
ORDER BY id
`

type ListLocationsRow struct {
	ID        int32
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	Latitude  sql.NullString
	Longitude sql.NullString
	CreatedAt sql.NullTime
}

// GÜNCELLENDİ: "*" yerine tüm kolonlar açıkça yazılarak yeni kolonlar eklendi.
func (q *Queries) ListLocations(ctx context.Context) ([]ListLocationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLocationsRow
	for rows.Next() {
		var i ListLocationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.SiteUrl,
			&i.Notes,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTripsByUserID = `-- name: ListTripsByUserID :many
SELECT id, user_id, name, description, start_date, end_date, start_position, end_position, created_at, updated_at
FROM trips
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListTripsByUserIDRow struct {
	ID            int32
	UserID        string
	Name          string
	Description   sql.NullString
	StartDate     time.Time
	EndDate       time.Time
	StartPosition sql.NullString
	EndPosition   sql.NullString
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

// DÜZELTİLDİ: "finish_position" -> "end_position" olarak değiştirildi.
func (q *Queries) ListTripsByUserID(ctx context.Context, userID string) ([]ListTripsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listTripsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTripsByUserIDRow
	for rows.Next() {
		var i ListTripsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.StartPosition,
			&i.EndPosition,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLocationFromTrip = `-- name: RemoveLocationFromTrip :exec
DELETE FROM trip_locations
WHERE trip_id = $1 AND location_id = $2
`

type RemoveLocationFromTripParams struct {
	TripID     int32
	LocationID int32
}

func (q *Queries) RemoveLocationFromTrip(ctx context.Context, arg RemoveLocationFromTripParams) error {
	_, err := q.db.ExecContext(ctx, removeLocationFromTrip, arg.TripID, arg.LocationID)
	return err
}
