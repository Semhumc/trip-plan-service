// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addLocationToTrip = `-- name: AddLocationToTrip :exec
INSERT INTO trip_locations (trip_id, location_id, position)
VALUES ($1, $2, $3)
`

type AddLocationToTripParams struct {
	TripID     int32
	LocationID int32
	Position   int32
}

func (q *Queries) AddLocationToTrip(ctx context.Context, arg AddLocationToTripParams) error {
	_, err := q.db.ExecContext(ctx, addLocationToTrip, arg.TripID, arg.LocationID, arg.Position)
	return err
}

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name, address, site_url, notes)
VALUES ($1, $2, $3, $4)
RETURNING id, name, address, site_url, notes, created_at, latitude, longitude
`

type CreateLocationParams struct {
	Name    string
	Address sql.NullString
	SiteUrl sql.NullString
	Notes   sql.NullString
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.Name,
		arg.Address,
		arg.SiteUrl,
		arg.Notes,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.SiteUrl,
		&i.Notes,
		&i.CreatedAt,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (user_id, name, description, start_date, end_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, description, start_date, end_date, created_at, updated_at, start_position, finish_position
`

type CreateTripParams struct {
	UserID      string
	Name        string
	Description sql.NullString
	StartDate   time.Time
	EndDate     time.Time
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartPosition,
		&i.FinishPosition,
	)
	return i, err
}

const create_Location = `-- name: Create_Location :one
INSERT INTO locations (name, address, site_url, notes)
VALUES ($1, $2, $3, $4)
RETURNING id, name, address, site_url, notes, created_at
`

type Create_LocationParams struct {
	Name    string
	Address sql.NullString
	SiteUrl sql.NullString
	Notes   sql.NullString
}

type Create_LocationRow struct {
	ID        int32
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) Create_Location(ctx context.Context, arg Create_LocationParams) (Create_LocationRow, error) {
	row := q.db.QueryRowContext(ctx, create_Location,
		arg.Name,
		arg.Address,
		arg.SiteUrl,
		arg.Notes,
	)
	var i Create_LocationRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.SiteUrl,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const create_Trip = `-- name: Create_Trip :one
INSERT INTO trips (user_id, name, description, start_date, end_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, description, start_date, end_date, created_at, updated_at
`

type Create_TripParams struct {
	UserID      string
	Name        string
	Description sql.NullString
	StartDate   time.Time
	EndDate     time.Time
}

type Create_TripRow struct {
	ID          int32
	UserID      string
	Name        string
	Description sql.NullString
	StartDate   time.Time
	EndDate     time.Time
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) Create_Trip(ctx context.Context, arg Create_TripParams) (Create_TripRow, error) {
	row := q.db.QueryRowContext(ctx, create_Trip,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	var i Create_TripRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const create_Trip_Location = `-- name: Create_Trip_Location :exec
INSERT INTO trip_locations (trip_id, location_id, position)
VALUES ($1, $2, $3)
`

type Create_Trip_LocationParams struct {
	TripID     int32
	LocationID int32
	Position   int32
}

func (q *Queries) Create_Trip_Location(ctx context.Context, arg Create_Trip_LocationParams) error {
	_, err := q.db.ExecContext(ctx, create_Trip_Location, arg.TripID, arg.LocationID, arg.Position)
	return err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trips
WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, id)
	return err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, address, site_url, notes, created_at, latitude, longitude FROM locations
WHERE id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id int32) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.SiteUrl,
		&i.Notes,
		&i.CreatedAt,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const getTripByID = `-- name: GetTripByID :one
SELECT id, user_id, name, description, start_date, end_date, created_at, updated_at, start_position, finish_position FROM trips
WHERE id = $1
`

func (q *Queries) GetTripByID(ctx context.Context, id int32) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTripByID, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartPosition,
		&i.FinishPosition,
	)
	return i, err
}

const getTripLocations = `-- name: GetTripLocations :many
SELECT l.id, l.name, l.address, l.site_url, l.notes, l.created_at, l.latitude, l.longitude, tl.position FROM locations l
JOIN trip_locations tl ON l.id = tl.location_id
WHERE tl.trip_id = $1
ORDER BY tl.position
`

type GetTripLocationsRow struct {
	ID        int32
	Name      string
	Address   sql.NullString
	SiteUrl   sql.NullString
	Notes     sql.NullString
	CreatedAt sql.NullTime
	Latitude  sql.NullString
	Longitude sql.NullString
	Position  int32
}

func (q *Queries) GetTripLocations(ctx context.Context, tripID int32) ([]GetTripLocationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTripLocations, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripLocationsRow
	for rows.Next() {
		var i GetTripLocationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.SiteUrl,
			&i.Notes,
			&i.CreatedAt,
			&i.Latitude,
			&i.Longitude,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, address, site_url, notes, created_at, latitude, longitude FROM locations
ORDER BY id
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.SiteUrl,
			&i.Notes,
			&i.CreatedAt,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTripsByUserID = `-- name: ListTripsByUserID :many
SELECT id, user_id, name, description, start_date, end_date, created_at, updated_at, start_position, finish_position FROM trips
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTripsByUserID(ctx context.Context, userID string) ([]Trip, error) {
	rows, err := q.db.QueryContext(ctx, listTripsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartPosition,
			&i.FinishPosition,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLocationFromTrip = `-- name: RemoveLocationFromTrip :exec
DELETE FROM trip_locations
WHERE trip_id = $1 AND location_id = $2
`

type RemoveLocationFromTripParams struct {
	TripID     int32
	LocationID int32
}

func (q *Queries) RemoveLocationFromTrip(ctx context.Context, arg RemoveLocationFromTripParams) error {
	_, err := q.db.ExecContext(ctx, removeLocationFromTrip, arg.TripID, arg.LocationID)
	return err
}
